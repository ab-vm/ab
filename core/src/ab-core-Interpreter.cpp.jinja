#define AB_DEBUG

#include <Ab/Context.hpp>
#include <Ab/Debug.hpp>
#include <Ab/Interpreter.hpp>
#include <Ab/Module.hpp>
#include <Ab/Opcode.hpp>
#include <Ab/VirtualMachine.hpp>

#include <cstdio>

namespace Ab {

/*
 * Call-in Layout
 *
 * high address (grows down)
 *
 * Value                             | Address         | Notes
 * ----------------------------------|-----------------|--------------------------------------------
 * - frame                           |                 | frame end
 *   - caller state                  |                 | Pushed despite
 *     - ip                          |                 |
 *     - sp                          |                 |
 *     - fn                          |                 |
 *   - flags                         | sp[nvar + narg] | tagged as native frame
 * - registers                       |                 |
 *   - variables                     |                 |
 *     - var 2                       | sp[narg + 2]    |
 *     - var 1                       | sp[narg + 1]    |
 *     - var 0                       | sp[narg + 0]    |
 *   - arguments                     |                 | args assigned directly by call-in native
 *     - arg 2                       | sp[2]           |
 *     - arg 1                       | sp[1]           |
 *     - arg 0                       | sp[0]           | register pointer
 *
 * low address (grows down)
 *
 * In a native call-in, the arguments are written directly in-place by the caller, and the return
 * values will be manually copied out. Thus, the call-in has no register slots in it's frame.
 */

/*
 * Call-out Layout
 *
 * high address (grows down)
 *
 * Value                             | Address         | Notes
 * ----------------------------------|-----------------|--------------------------------------------
 * - stack-end eye catcher           | entry Frame
 * - registers                       |
 *   - variables (results)           | vars are for results only -- no args
 *     - var 2                       | return value 2
 *     - var 1                       | return value 1
 *     - var 0                       | return value 0
 * - frame                           |
 *   - flags <end>                   |
 * - frame                           | rp + register-end + frame-size     <----- frame end
 *   - caller state                  |
 *     - ip                          |
 *     - sp                          |
 *     - fn                          |
 *   - flags <normal>                | rp[nregs] = rp + nregs * 4         <----- register end
 * - registers                       |
 *   - variables                     |
 *     - var 2                       | rp[5] = rp + 20
 *     - var 1                       | rp[4] = rp + 16
 *     - var 0                       | rp[3] = rp + 12
 *   - arguments                     |
 *     - arg 2                       | rp[2] = rp +  8
 *     - arg 1                       | rp[1] = rp +  4
 *     - arg 0                       | rp[0] = rp +  0                    <----- register pointer
 * - frame                           |
 *
 * low address (grows down)
 */

///
/// Interpreter Typedefs (TODO: should these move?)
///

using r8  = std::uint8_t;
using r16 = std::uint16_t;
using r32 = std::uint32_t;
using u8  = std::uint8_t;
using u16 = std::uint16_t;
using u32 = std::uint32_t;
using u64 = std::uint64_t;
using i8  = std::int8_t;
using i16 = std::int16_t;
using i32 = std::int32_t;
using i64 = std::int64_t;
using f32 = float;
using f64 = double;
using x32 = std::uint32_t;
using x64 = std::uint64_t;
using ref = std::uint64_t;

///
/// Forward Declarations
///

static Byte* act(ExecState* state, ExecAction action);

static std::pair<ExecAction, Byte*> do_interpret(ExecState* state);

///
/// Register Accessors.
///

template <typename T>
T& reg_at(Byte* sp, std::size_t index) noexcept {
	return *reinterpret_cast<T*>(sp + (index * SIZEOF_SLOT));
}

u32& u32_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<u32>(sp, index); }

u64& u64_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<u64>(sp, index); }

i32& i32_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<i32>(sp, index); }

i64& i64_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<i64>(sp, index); }

f32& f32_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<f32>(sp, index); }

f64& f64_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<f64>(sp, index); }

x32& x32_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<x32>(sp, index); }

x64& x64_reg_at(Byte* sp, std::size_t index) noexcept { return reg_at<x64>(sp, index); }

///
/// Instruction Stream Decoding
///

template <typename T>
T operand(const Byte* ip, std::size_t offset) noexcept {
	return *reinterpret_cast<const T*>(ip + offset);
}

r8 r8_operand(const Byte* ip, std::size_t offset) noexcept { return operand<r8>(ip, offset); }

r16 r16_operand(const Byte* ip, std::size_t offset) noexcept { return operand<r16>(ip, offset); }

r32 r32_operand(const Byte* ip, std::size_t offset) noexcept { return operand<r32>(ip, offset); }

i8 i8_operand(const Byte* ip, std::size_t offset) noexcept { return operand<i8>(ip, offset); }

i16 i16_operand(const Byte* ip, std::size_t offset) noexcept { return operand<i16>(ip, offset); }

i32 i32_operand(const Byte* ip, std::size_t offset) noexcept { return operand<i32>(ip, offset); }

u8 u8_operand(const Byte* ip, std::size_t offset) noexcept { return operand<u8>(ip, offset); }

u16 u16_operand(const Byte* ip, std::size_t offset) noexcept { return operand<u16>(ip, offset); }

u32 u32_operand(const Byte* ip, std::size_t offset) noexcept { return operand<u32>(ip, offset); }

f32 f32_operand(const Byte* ip, std::size_t offset) noexcept { return operand<f32>(ip, offset); }

f64 f64_operand(const Byte* ip, std::size_t offset) noexcept { return operand<f64>(ip, offset); }

///
/// Indirect register accessors
///

template <typename T, typename U>
T& reg_at_operand(Byte* sp, const Byte* ip, std::size_t offset) noexcept {
	return reg_at<T>(sp, operand<U>(ip, offset));
}

template <typename T>
T& reg_at_r8_operand(Byte* sp, const Byte* ip, std::size_t offset) noexcept {
	return reg_at<T>(sp, r8_operand(ip, offset));
}

///
/// Call Frame Helpers
///

template <typename T, typename... Args>
T* push_value(Byte*& stack, Args&&... args) {
	static_assert(std::is_trivially_destructible_v<T>);
	stack -= sizeof(T);
	return new (stack) T(std::forward<Args>(args)...);
}

template <typename T, typename... Args>
T* push_value(ExecState& state, Args&&... args) {
	return push(state.st_a.sp, std::forward<Args>(args)...);
}

template <typename T, typename... Args>
T* push_value(Context& cx, Args&&... args) {
	return push(cx.exec_state(), std::forward<Args>(args)...);
}

template <typename T>
T* pop_value(Byte*& stack) {
	auto r = reinterpret_cast<T*>(stack);
	static_assert(std::is_trivially_destructible_v<T>);
	stack += sizeof(T);
	return r;
}

template <typename T>
T* pop_value(ExecState& state) {
	pop<T>(state.st_a.sp);
}

template <typename T>
void pop_value(Context& cx) {
	pop<T>(cx.exec_state());
}

Byte* push_regs(Byte*& stack, std::size_t nregs) {
	stack -= nregs * SIZEOF_SLOT;
	return stack;
}

Byte* push_regs(ExecState& state, std::size_t nregs) { return push_regs(state.st_a.sp, nregs); }

Byte* push_regs(Context& cx, std::size_t nregs) { return push_regs(cx.exec_state(), nregs); }

Byte* pop_regs(Byte*& stack, std::size_t nregs) {
	auto copy = stack;
	stack += nregs * SIZEOF_SLOT;
	return copy;
}

Byte* pop_regs(ExecState& state, std::size_t nregs) { return pop_regs(state.st_a.sp, nregs); }

Byte* pop_regs(Context& cx, std::size_t nregs) { return pop_regs(cx.exec_state(), nregs); }

template <typename T>
T* peek_value(Byte* stack, std::size_t offset = 0) {
	return reinterpret_cast<T*>(stack + offset);
}

///
/// Debug Helpers
///

#ifdef AB_DEBUG

#define TRACE_ENTER(insn) fmt::print(stderr, "  * " insn " @{}\n", (void*)ip)
#define TRACE_PRINT(msg, ...) fmt::print(stderr, "    " msg, __VA_ARGS__)
#define TRACE_LEAVE(insn) fmt::print(stderr, "\n")

#else  // AB_DEBUG

#define TRACE_ENTER(insn)      // nothing
#define TRACE_PRINT(msg, ...)  // nothing
#define TRACE_LEAVE(str)       // nothing

#endif  // AB_DEBUG

#define COMMIT_STATE() \
	do { \
		state->st_a.sp = sp; \
		state->st_a.ip = ip; \
		state->st_a.fn = fn; \
	} while (0)

#define RELOAD_STATE() \
	do { \
		sp = state->st_a.sp; \
		ip = state->st_a.ip; \
		fn = state->st_a.fn; \
	} while (0)

///
/// Interpreter method calls
///

Interpreter::Interpreter() {
	std::size_t stack_size = 2048;

	state_.st_b.stack       = new Byte[stack_size];
	state_.st_b.func        = nullptr;
	state_.st_b.flags.trap  = false;
	state_.st_b.flags.error = false;
	state_.st_b.condition   = ExecCond::HALTED;

	state_.st_a.sp = state_.st_b.stack + stack_size;
	state_.st_a.ip = nullptr;
	state_.st_a.fn = nullptr;
}

Interpreter::~Interpreter() { delete[] state_.st_b.stack; }

///
/// Public API: calling into the interpreter
///

Byte* enter_native_frame(Context& cx, std::size_t nregs) {
	ExecState& state = cx.exec_state();
	Byte* stack      = state.st_a.sp;

#ifdef AB_DEBUG
	push_value<std::uint64_t>(stack, 0xdeadbeef);
#endif

	NativeFrame* frame = push_value<NativeFrame>(stack);
	AB_DBG_MSG("frame @{}\n", (void*)frame);
	frame->save_area.sp = state.st_a.sp;
	frame->save_area.ip = state.st_a.ip;
	frame->save_area.fn = state.st_a.fn;

	push_regs(stack, nregs);

	state.st_a.sp = stack;

	AB_DBG_MSG("enter_native_frame: stack={}\n", (void*)stack);

	return stack;
}

Byte* leave_native_frame(Context& cx, std::size_t nregs) {
	ExecState& state = cx.exec_state();
	Byte* stack      = state.st_a.sp;

	pop_regs(stack, nregs);
	auto* frame = pop_value<NativeFrame>(stack);

	state.st_a.sp = frame->save_area.sp;
	state.st_a.ip = frame->save_area.ip;
	state.st_a.fn = frame->save_area.fn;

#ifdef AB_DEBUG
	auto* eyecatcher = pop_value<std::uint64_t>(stack);
	AB_ASSERT(*eyecatcher == 0xdeadbeef);
#endif

	return state.st_a.sp;
}

static Byte* interpret_func(ExecState* state, FuncInst* func) {
	state->st_b.func = func;
	state->st_a.ip   = func->body();
	state->st_a.fn   = nullptr;  // TODO: func->constants();
	return act(state, ExecAction::INTERPRET);
}

static Byte* interpret_func(Context& cx, FuncInst* func) {
	return interpret_func(&cx.exec_state(), func);
}

Byte* enter_interpreter(Context& cx, FuncInst* func_inst) { return interpret_func(cx, func_inst); }

void interpret(ExecState* state, FuncInst* func) { interpret_func(state, func); }

void interpret(ExecState* state, ModuleInst* mod, std::size_t index) {
	interpret_func(state, mod->func_inst(index));
}

///
/// Interpreter Action Handling
///

#define DO_ACTION(action) goto* ACTION_TABLE[std::size_t(action)]

/// The main interpreter action trampoline.
///
static Byte* act(ExecState* state, ExecAction action) {
	constexpr static void* const ACTION_TABLE[4] = {
		&&do_crash,      // 0
		&&do_interpret,  // 1
		&&do_halt,       // 2
		&&do_exit        // 3
	};

	Byte* ret = nullptr;

	AB_DBG_MSG("enter action loop\n");
	DO_ACTION(action);

do_exit:
	AB_DBG_MSG("action: exit\n");
	return ret;

do_interpret:
	AB_DBG_MSG("action: interpret\n");
	std::tie(action, ret) = do_interpret(state);
	DO_ACTION(action);

do_halt:
	AB_DBG_MSG("action: halt\n");
	return nullptr;

do_crash:
	AB_DBG_MSG("action: crash\n");
	AB_ASSERT_UNREACHABLE();
}

///
/// Core Bytecode Interpreter
///

#define DO_INSN(insn) goto* INSTRUCTION_TABLE[(Byte)(insn)];
#define DISPATCH_INSN() DO_INSN(*(Byte*)ip)

static std::pair<ExecAction, Byte*> do_interpret(ExecState* state) {
	static void* const INSTRUCTION_TABLE[256] = {
		&&do_unreachable,     // 00
		&&do_nop,             // 01
		&&do_call_primitive,  // 02
		&&do_unimplemented,   // 03
		&&do_halt,            // 04
		&&do_unimplemented,   // 05
		&&do_unimplemented,   // 06
		&&do_unimplemented,   // 07
		&&do_unimplemented,   // 08
		&&do_unimplemented,   // 09
		&&do_unimplemented,   // 10
		&&do_unimplemented,   // 11
		&&do_return,          // 12
		&&do_x32_return,      // 13
		&&do_unimplemented,   // 14
		&&do_unimplemented,   // 15
		&&do_unimplemented,   // 16
		&&do_unimplemented,   // 17
		&&do_unimplemented,   // 18
		&&do_unimplemented,   // 19
		&&do_unimplemented,   // 20
		&&do_unimplemented,   // 21
		&&do_goto,            // 22
		&&do_goto_if,         // 23
		&&do_goto_unless,     // 24
		&&do_unimplemented,   // 25
		&&do_unimplemented,   // 26
		&&do_unimplemented,   // 27
		&&do_unimplemented,   // 28
		&&do_unimplemented,   // 29
		&&do_unimplemented,   // 30
		&&do_unimplemented,   // 31
		&&do_unimplemented,   // 32
		&&do_unimplemented,   // 33
		&&do_unimplemented,   // 34
		&&do_unimplemented,   // 35
		&&do_unimplemented,   // 36
		&&do_unimplemented,   // 37
		&&do_unimplemented,   // 38
		&&do_unimplemented,   // 39
		&&do_unimplemented,   // 40
		&&do_unimplemented,   // 41
		&&do_unimplemented,   // 42
		&&do_unimplemented,   // 43
		&&do_unimplemented,   // 44
		&&do_unimplemented,   // 45
		&&do_unimplemented,   // 46
		&&do_unimplemented,   // 47
		&&do_unimplemented,   // 48
		&&do_unimplemented,   // 49
		&&do_unimplemented,   // 50
		&&do_unimplemented,   // 51
		&&do_unimplemented,   // 52
		&&do_unimplemented,   // 53
		&&do_unimplemented,   // 54
		&&do_unimplemented,   // 55
		&&do_unimplemented,   // 56
		&&do_unimplemented,   // 57
		&&do_unimplemented,   // 58
		&&do_unimplemented,   // 59
		&&do_unimplemented,   // 60
		&&do_unimplemented,   // 61
		&&do_unimplemented,   // 62
		&&do_unimplemented,   // 63
		&&do_unimplemented,   // 64
		&&do_unimplemented,   // 65
		&&do_unimplemented,   // 66
		&&do_unimplemented,   // 67
		&&do_unimplemented,   // 68
		&&do_unimplemented,   // 69
		&&do_unimplemented,   // 70
		&&do_unimplemented,   // 71
		&&do_unimplemented,   // 72
		&&do_unimplemented,   // 73
		&&do_unimplemented,   // 74
		&&do_unimplemented,   // 75
		&&do_unimplemented,   // 76
		&&do_unimplemented,   // 77
		&&do_unimplemented,   // 78
		&&do_unimplemented,   // 79
		&&do_unimplemented,   // 80
		&&do_unimplemented,   // 81
		&&do_unimplemented,   // 82
		&&do_unimplemented,   // 83
		&&do_unimplemented,   // 84
		&&do_unimplemented,   // 85
		&&do_unimplemented,   // 86
		&&do_unimplemented,   // 87
		&&do_unimplemented,   // 88
		&&do_unimplemented,   // 89
		&&do_unimplemented,   // 90
		&&do_unimplemented,   // 91
		&&do_unimplemented,   // 92
		&&do_unimplemented,   // 93
		&&do_unimplemented,   // 94
		&&do_unimplemented,   // 95
		&&do_unimplemented,   // 96
		&&do_unimplemented,   // 97
		&&do_unimplemented,   // 98
		&&do_unimplemented,   // 99
		&&do_unimplemented,   // 100
		&&do_unimplemented,   // 101
		&&do_unimplemented,   // 102
		&&do_unimplemented,   // 103
		&&do_unimplemented,   // 104
		&&do_unimplemented,   // 105
		&&do_i32_add,         // 106
		&&do_i32_sub,         // 107
		&&do_unimplemented,   // 108
		&&do_unimplemented,   // 109
		&&do_unimplemented,   // 110
		&&do_unimplemented,   // 111
		&&do_unimplemented,   // 112
		&&do_unimplemented,   // 113
		&&do_unimplemented,   // 114
		&&do_unimplemented,   // 115
		&&do_unimplemented,   // 116
		&&do_unimplemented,   // 117
		&&do_unimplemented,   // 118
		&&do_unimplemented,   // 119
		&&do_unimplemented,   // 120
		&&do_unimplemented,   // 121
		&&do_unimplemented,   // 122
		&&do_unimplemented,   // 123
		&&do_unimplemented,   // 124
		&&do_unimplemented,   // 125
		&&do_unimplemented,   // 126
		&&do_unimplemented,   // 127
		&&do_unimplemented,   // 128
		&&do_unimplemented,   // 129
		&&do_unimplemented,   // 130
		&&do_unimplemented,   // 131
		&&do_unimplemented,   // 132
		&&do_unimplemented,   // 133
		&&do_unimplemented,   // 134
		&&do_unimplemented,   // 135
		&&do_unimplemented,   // 136
		&&do_unimplemented,   // 137
		&&do_unimplemented,   // 138
		&&do_unimplemented,   // 139
		&&do_unimplemented,   // 140
		&&do_unimplemented,   // 141
		&&do_unimplemented,   // 142
		&&do_unimplemented,   // 143
		&&do_unimplemented,   // 144
		&&do_unimplemented,   // 145
		&&do_unimplemented,   // 146
		&&do_unimplemented,   // 147
		&&do_unimplemented,   // 148
		&&do_unimplemented,   // 149
		&&do_unimplemented,   // 150
		&&do_unimplemented,   // 151
		&&do_unimplemented,   // 152
		&&do_unimplemented,   // 153
		&&do_unimplemented,   // 154
		&&do_unimplemented,   // 155
		&&do_unimplemented,   // 156
		&&do_unimplemented,   // 157
		&&do_unimplemented,   // 158
		&&do_unimplemented,   // 159
		&&do_unimplemented,   // 160
		&&do_unimplemented,   // 161
		&&do_unimplemented,   // 162
		&&do_unimplemented,   // 163
		&&do_unimplemented,   // 164
		&&do_unimplemented,   // 165
		&&do_unimplemented,   // 166
		&&do_unimplemented,   // 167
		&&do_unimplemented,   // 168
		&&do_unimplemented,   // 169
		&&do_unimplemented,   // 170
		&&do_unimplemented,   // 171
		&&do_unimplemented,   // 172
		&&do_unimplemented,   // 173
		&&do_unimplemented,   // 174
		&&do_unimplemented,   // 175
		&&do_unimplemented,   // 176
		&&do_unimplemented,   // 177
		&&do_unimplemented,   // 178
		&&do_unimplemented,   // 179
		&&do_unimplemented,   // 180
		&&do_unimplemented,   // 181
		&&do_unimplemented,   // 182
		&&do_unimplemented,   // 183
		&&do_unimplemented,   // 184
		&&do_unimplemented,   // 185
		&&do_unimplemented,   // 186
		&&do_unimplemented,   // 187
		&&do_unimplemented,   // 188
		&&do_unimplemented,   // 189
		&&do_unimplemented,   // 190
		&&do_unimplemented,   // 191
		&&do_unimplemented,   // 192
		&&do_unimplemented,   // 193
		&&do_unimplemented,   // 194
		&&do_unimplemented,   // 195
		&&do_unimplemented,   // 196
		&&do_unimplemented,   // 197
		&&do_unimplemented,   // 198
		&&do_unimplemented,   // 199
		&&do_unimplemented,   // 200
		&&do_unimplemented,   // 201
		&&do_unimplemented,   // 202
		&&do_unimplemented,   // 203
		&&do_unimplemented,   // 204
		&&do_unimplemented,   // 205
		&&do_unimplemented,   // 206
		&&do_unimplemented,   // 207
		&&do_unimplemented,   // 208
		&&do_unimplemented,   // 209
		&&do_unimplemented,   // 210
		&&do_unimplemented,   // 211
		&&do_unimplemented,   // 212
		&&do_unimplemented,   // 213
		&&do_unimplemented,   // 214
		&&do_unimplemented,   // 215
		&&do_unimplemented,   // 216
		&&do_unimplemented,   // 217
		&&do_unimplemented,   // 218
		&&do_unimplemented,   // 219
		&&do_unimplemented,   // 220
		&&do_unimplemented,   // 221
		&&do_unimplemented,   // 222
		&&do_unimplemented,   // 223
		&&do_unimplemented,   // 224
		&&do_unimplemented,   // 225
		&&do_unimplemented,   // 226
		&&do_unimplemented,   // 227
		&&do_unimplemented,   // 228
		&&do_unimplemented,   // 229
		&&do_unimplemented,   // 230
		&&do_unimplemented,   // 231
		&&do_unimplemented,   // 232
		&&do_unimplemented,   // 233
		&&do_unimplemented,   // 234
		&&do_unimplemented,   // 235
		&&do_unimplemented,   // 236
		&&do_unimplemented,   // 237
		&&do_unimplemented,   // 238
		&&do_unimplemented,   // 239
		&&do_unimplemented,   // 240
		&&do_unimplemented,   // 241
		&&do_unimplemented,   // 242
		&&do_unimplemented,   // 243
		&&do_unimplemented,   // 244
		&&do_unimplemented,   // 245
		&&do_unimplemented,   // 246
		&&do_unimplemented,   // 247
		&&do_unimplemented,   // 248
		&&do_unimplemented,   // 249
		&&do_unimplemented,   // 250
		&&do_unimplemented,   // 251
		&&do_unimplemented,   // 252
		&&do_unimplemented,   // 253
		&&do_unimplemented,   // 254
		&&do_unimplemented    // 255
	};

	const Byte* ip;
	Byte* sp;
	FuncInst* fn;

	RELOAD_STATE();
	DISPATCH_INSN();

do_unimplemented:
	TRACE_ENTER("unimplemented");
	AB_ASSERT_UNREACHABLE();

do_unreachable:
	TRACE_ENTER("unreachable");
	COMMIT_STATE();
	state->st_b.flags.error = true;
	return {ExecAction::EXIT, nullptr};

do_nop:
	TRACE_ENTER("nop");
	ip += NOP_SIZEOF;
	DISPATCH_INSN();

do_halt:
	TRACE_ENTER("halt");
	COMMIT_STATE();
	return {ExecAction::HALT, nullptr};

do_call_primitive:
	TRACE_ENTER("call_primitive");
	COMMIT_STATE();
	AB_ASSERT_UNREACHABLE();

do_goto:
	TRACE_ENTER("goto");
	{
		i8 off = i8_operand(ip, GOTO_OFF_OFFSET);
		ip += off + GOTO_SIZEOF;
		DISPATCH_INSN();
	}

do_goto_if:
	TRACE_ENTER("goto_if");
	{
		r8 idx  = r8_operand(ip, GOTO_IF_TST_OFFSET);
		i8 off  = i8_operand(ip, GOTO_IF_OFF_OFFSET);
		u32 val = u32_reg_at(sp, idx);
		if (val) {
			ip += off;
		}
		ip += GOTO_IF_SIZEOF;
		DISPATCH_INSN();
	}

do_goto_unless:
	TRACE_ENTER("goto_unless");
	{
		r8 idx  = r8_operand(ip, GOTO_UNLESS_TST_OFFSET);
		i8 off  = i8_operand(ip, GOTO_UNLESS_OFF_OFFSET);
		u32 val = u32_reg_at(sp, idx);
		if (!val) {
			ip += off;
		}
		ip += GOTO_IF_SIZEOF;
		DISPATCH_INSN();
	}

do_return:
	TRACE_ENTER("return");
	{
		FuncInst* func      = state->st_b.func;
		const FrameTag* tag = reinterpret_cast<FrameTag*>(sp + func->nreg_bytes());

		if (tag->frame_kind() == FrameKind::NORMAL) {
			
		}
	
		if (tag->frame_kind() == FrameKind::NATIVE) {
			COMMIT_STATE();
			return {ExecAction::EXIT, nullptr};
		}

		COMMIT_STATE();
		AB_ASSERT_UNREACHABLE();
	}

do_x32_return:
	TRACE_ENTER("x32.return");
	{
		r8 idx   = r8_operand(ip, X32_RETURN_RET_OFFSET);
		x32& reg = x32_reg_at(sp, idx);

		TRACE_PRINT("ret idx={} ptr={} val={}\n", idx, (void*)&reg, reg);

		FuncInst* func      = state->st_b.func;
		const FrameTag* tag = reinterpret_cast<FrameTag*>(sp + func->nreg_bytes());

		if (tag->frame_kind() == FrameKind::NATIVE) {
			COMMIT_STATE();
			return {ExecAction::EXIT, (Byte*)&reg};
		}

		COMMIT_STATE();
		AB_ASSERT_UNREACHABLE();
	}

do_call:
	TRACE_ENTER("call");
	{
		COMMIT_STATE();
		AB_ASSERT_UNREACHABLE();
#if 0  /////////////////////////////////////////////////////////////////////////
		f8 tgt_idx = f8_operand(ip, CALL_TGT_OFFSET);
		r8 arg_idx = r8_operand(ip, CALL_ARG_IDX_OFFSET);
		u8 len_idx = r8_operand(ip, CALL_ARG_LEN_OFFSET);
		r8 ret_idx = r8_operand(ip, CALL_RET_IDX_OFFSET);
#endif  ////////////////////////////////////////////////////////////////////////
	}

do_i32_add:
	TRACE_ENTER("i32.add");
	{
		r8 dst_idx = r8_operand(ip, I32_ADD_DST_OFFSET);
		r8 lhs_idx = r8_operand(ip, I32_ADD_LHS_OFFSET);
		r8 rhs_idx = r8_operand(ip, I32_ADD_RHS_OFFSET);
		i32& dst   = i32_reg_at(sp, dst_idx);
		i32& lhs   = i32_reg_at(sp, lhs_idx);
		i32& rhs   = i32_reg_at(sp, rhs_idx);
		dst        = lhs + rhs;
		TRACE_PRINT("rhs idx={} ptr={} val={}\n", rhs_idx, (void*)&rhs, rhs);
		TRACE_PRINT("lhs idx={} ptr={} val={}\n", lhs_idx, (void*)&lhs, lhs);
		TRACE_PRINT("dst idx={} ptr={} val={}\n", dst_idx, (void*)&dst, dst);
		ip += I32_ADD_SIZEOF;
		DISPATCH_INSN();
	}

do_i32_sub:
	TRACE_ENTER("i32.sub");
	{
		r8 dst_idx = r8_operand(ip, I32_SUB_DST_OFFSET);
		r8 lhs_idx = r8_operand(ip, I32_SUB_LHS_OFFSET);
		r8 rhs_idx = r8_operand(ip, I32_SUB_RHS_OFFSET);
		i32& dst   = i32_reg_at(sp, dst_idx);
		i32& lhs   = i32_reg_at(sp, lhs_idx);
		i32& rhs   = i32_reg_at(sp, rhs_idx);
		dst        = lhs - rhs;
		TRACE_PRINT("rhs idx={} ptr={} val={}\n", rhs_idx, (void*)&rhs, rhs);
		TRACE_PRINT("lhs idx={} ptr={} val={}\n", lhs_idx, (void*)&lhs, lhs);
		TRACE_PRINT("dst idx={} ptr={} val={}\n", dst_idx, (void*)&dst, dst);
		ip += I32_SUB_SIZEOF;
		DISPATCH_INSN();
	}

	AB_ASSERT_UNREACHABLE();
	AB_UNREACHABLE();
}

}  // namespace Ab
