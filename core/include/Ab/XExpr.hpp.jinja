#ifndef AB_XEXPR_HPP_
#define AB_XEXPR_HPP_

#include <Ab/XOpCode.hpp>

#include <fmt/format.h>

namespace Ab {

@[- macro xexpr_typename(op_name) -]
	@( ("x_expr_" + op_name) | typeify )
@[- endmacro -]

/// Datastructure representing expressions (or statements) in internal programs.
@[ for operator in data.abx_operators ]
	struct @( xexpr_typename(operator.name) ) {
		XOpCode opcode;
		@[ for immediate in operator.immediates ]
			@( data.types[immediate.type].ctype ) @( immediate.name | varify );
		@[ endfor ]
	} __attribute__((packed));

	constexpr auto @( ("xexpr_" + operator.name + "_size") | constify ) = sizeof(@( xexpr_typename(operator.name) ));
	@( "\n\n" if not loop.last )
@[ endfor ]

/// When building functions, there is only one relocation type for all gotos, so the instruction layouts must be
/// the exact same.
static_assert(sizeof(XExprGoto) == sizeof(XExprGotoIf));
static_assert(offsetof(XExprGoto, offset) == offsetof(XExprGotoIf, offset));

static_assert(sizeof(XExprGoto) == sizeof(XExprGotoUnless));
static_assert(offsetof(XExprGoto, offset) == offsetof(XExprGotoUnless, offset));

} // namespace Ab

#endif // AB_XEXPR_HPP_
