#ifndef AB_INTERPRETER_HPP_
#define AB_INTERPRETER_HPP_

#include <Ab/Config.hpp>
#include <Ab/Address.hpp>
#include <Ab/Assert.hpp>
#include <Ab/Bytes.hpp>
#include <Ab/Func.hpp>
#include <Ab/State.hpp>

namespace Ab {

/// Handle to stack memory.
///
class Stack {
public:
	/// Default stack size.
	///
	static constexpr std::size_t DEFAULT_SIZE = kibibytes(8);

	Stack(std::size_t size) noexcept {
		address_ = new (std::nothrow) Byte[size];
		AB_ASSERT(address_ != nullptr);
	}

	Stack(const Stack&) = delete;

	Stack(Stack&& other) {
		address_       = other.address_;
		other.address_ = nullptr;
	}

	Stack() : Stack(DEFAULT_SIZE) {}

	~Stack() noexcept {
		if (address_ != nullptr) {
			delete[] address_;
		}
	}

	Byte* address() noexcept { return address_; }

	const Byte* address() const noexcept { return address_; }

	Stack& operator=(const Stack&) = delete;

private:
	Byte* address_;
};

enum class FrameKind : std::uint8_t {
	/// A top level call-in frame. native->interpreter.
	///
	NATIVE,

	/// A normal frame. interpreter->interpreter.
	///
	NORMAL,
};

/// Special 1-word struct embedded in the interpreter frame. Contains enough
/// information about the frame to identify it's type.
///
class FrameTag {
public:
	constexpr FrameTag(FrameKind k) : value_(std::uint32_t(k)) {}

	constexpr FrameTag(const FrameTag&) noexcept = default;

	constexpr std::uint32_t value() const noexcept { return value_; }

	constexpr FrameKind frame_kind() const noexcept { return FrameKind(value_); }

private:
	std::uint32_t value_;
};

/// Storage for saved-state embedded in the interpreter frame.
///
struct FrameSaveArea {
	Address ip;     ///< Saved instruction pointer.
	MutAddress sp;  ///< Saved stack pointer.
	FuncInst* fn;   ///< Saved function pointer.
};

/// Call-in / toplevel frame.
///
struct NativeFrame {
	NativeFrame() noexcept : tag(FrameKind::NATIVE) {}

	FrameSaveArea save_area;
	FrameTag tag;
};

/// An interpreter frame.
///
struct NormalFrame {
	NormalFrame() noexcept : tag(FrameKind::NORMAL) {}

	FrameSaveArea save_area;
	FrameTag tag;
};

/// Blow away the execution state.
///
inline void clear(ExecState* state) {
	state->st_b.stack       = nullptr;
	state->st_b.func        = nullptr;
	state->st_b.flags.trap  = false;
	state->st_b.flags.error = false;
	state->st_b.condition   = ExecCond::HALTED;

	state->st_a.sp = state->st_b.stack;
	state->st_a.ip = nullptr;
	state->st_a.fn = nullptr;
}

class Interpreter;

using PrimitiveFn = void (*)(ExecState*);

void interpret(ExecState* state, FuncInst* func);

class Interpreter {
public:
	Interpreter();

	Interpreter(const Interpreter&) = delete;

	Interpreter(Interpreter&&) = default;

	~Interpreter();

	ExecState& exec_state() noexcept { return state_; }

	const ExecState& exec_state() const noexcept { return state_; }

	/// initialize interpreter state and execute interpreter.
	///
	void interpret(const Func* target);

private:
	ExecState state_;
	// Stack stack_;
};

}  // namespace Ab

#endif  // AB_INTERPRETER_HPP_
