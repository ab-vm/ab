---

### Listing of INTERNAL executable operators.

## WASM expressions are rewritten to an internal representation to facilitate
## execution. This document lists the internal operators in Ab. The operators
## are closely related their WASM equivalents.

## Control Flow

### Fundamental

- name: unreachable
  code: 0x00
  doc: Trap immediately
- name: nop
  code: 0x01
  doc:  no operation
- name: call_primitive
  code: 0x02
  doc:  dispatch to primitive
  immediates:
    - name: tgt
      type: ptr
- name: halt
  code: 0x04
  doc: stop execution immediately and return.

### Inter-Func

- name: return
  code: 0x0c
  doc:  Return from a function without returning any values.
  signature: ()
- name: x32.return
  code: 0x0d
  doc:  Return a 32-bit value from a function.
  signature: ()
  immediates:
    - name: src
      type: reg_x32
- name: x64.return
  code: 0x0e
  signature: ()
- name: call
  code: 0x10
  doc:  Call a function by it's index
  signature: "T[args] : (T)"
  immediates:
    - name: function_index
      type: u32
- name: call_indirect
  code: 0x11
  doc:
    Call a function indirect with an expected signature.
    This operator takes a list of function arguments.
  immediates:
    - name: type_index
      type: u32

### Intra-Func

- name: goto
  code: 0x16
  doc:  Jump to a relative offset.
  immediates:
    - name: "off"
      type: i32
      doc:  relative, signed bytecode target. Must be within current function.
- name: goto_if
  code: 0x17
  doc:  Conditional jump
  immediates:
    - name: tst
      type: reg_i32
      doc:  The register holding the test condition.
    - name: "off"
      type: i32
      doc:  relative, signed bytecode target. Must be within current function.
- name: goto_unless
  code: 0x18
  doc: Conditional jump.
  signature: "(bool) : ()"
  immediates:
    - name: tst
      type: reg_i32
      doc:  The register holding the test condition.
    - name: "off"
      type: i32
      doc:  relative, signed target. Must be within current function.

## 32-bit untyped operators

- name: move_x32
  code: 0x20
  doc: Move values between register locations.
  immediates:
    - name: dst
      type: reg_x32
      doc:  Destination register. 32 bits.
    - name: src
      type: reg_x32
      doc:  Source register. 32 bits.

- name: move_x64
  code: 0x21
  doc: Move values between register locations.
  immediates:
    - name: dst
      type: reg_x64
      doc:  Destination register. 64 bits.
    - name: src
      type: reg_x64
      doc:  Source register. 64 bits.

- name: load_result_x32
  code: 0x22
  doc:  Move the result of a call into a register
  immediates:
    - name: dst
      type: reg_x32
      doc:  Destination register. 32 bits.

- name: load_result_x64
  code: 0x23
  doc:  Move the result of a call into a register
  immediates:
    - name: dst
      type: reg_x64
      doc:  Destination register. 64 bits.

# gap: [0x1e, 0x1f]

## 32 bit argument access

# - name: x32_get_arg
#   code: 0x20
#   doc:  Push a 32bit value from a local onto the stack
#   immediates:
#     - name: offset
#       type: u32
#       doc:  offset in bytes into the local data.
# - name: x32_set_arg
#   code: 0x21
#   doc:  Pop a 32bit value from the stack, into a local.
#   signature: "(x32) : ()"
#   immediates:
#     - name: offset
#       type: u32
#       doc:  offset into locals array, in bytes.
# - name: x32_tee_arg
#   code: 0x22
#   doc:  Write to a 32 bit argument.
#   immediates:
#     - name: offset
#       type: u32
#       doc:  offset into locals array, in bytes.

## 64bit argument access

# - name: x64_get_arg
#   code: 0x23
#   doc:  Read a 32 bit argument.
#   immediates:
#     - name: offset
#       type: u32
# - name: x64_set_arg
#   code: 0x24
#   doc:  Write to a 64 bit argument
#   immediates:
#     - name: offset
#       type: u32
# - name: x64_tee_arg
#   code: 0x25
#   doc:  Write to a 64 bit argument, leaving the value on stack.
#   signature: "(x64) : (x64)"
#   immediates:
#     - name: offset
#       type: u32

## Global variable access

- name: get_global
  code: 0x26
  doc: Read a global variable
  immediates:
    - name: global_index
      type: u32

- name: set_global
  code: 0x27
  doc: Write a global variable
  immediates:
    - name: global_index
      type: u32

## Memory load operators

# - name: i32_load
#   code: 0x28
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load
#   code: 0x29
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: f32_load
#   code: 0x2a
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: f64_load
#   code: 0x2b
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i32_load8_s
#   code: 0x2c
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i32_load8_u
#   code: 0x2d
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i32_load16_s
#   code: 0x2e
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i32_load16_u
#   code: 0x2f
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load8_s
#   code: 0x30
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load8_u
#   code: 0x31
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load16_s
#   code: 0x32
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load16_u
#   code: 0x33
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load32_s
#   code: 0x34
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_load32_u
#   code: 0x35
#   doc:
#   immediates:
#     - flags: varuint32
#     - offset: varuint32

# ## Memory store operators

# - name: i32_store
#   code: 0x36
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_store
#   code: 0x37
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: f32_store
#   code: 0x38
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: f64_store
#   code: 0x39
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i32_store8
#   code: 0x3a
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i32_store16
#   code: 0x3b
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_store8
#   code: 0x3c
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_store16
#   code: 0x3d
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32
# - name: i64_store32
#   code: 0x3e
#   doc: Store to memory
#   immediates:
#     - flags: varuint32
#     - offset: varuint32

# ## Memory

# - name: current_memory
#   code: 0x3f
#   doc: Query the size of memory
#   immediates:
#     - reserved: varuint1
# - name: grow_memory
#   code: 0x40
#   doc: ""

# ## Constants

# - name: x32_const
#   code: 0x41
#   doc: A constant i32
#   immediates:
#     - name: value
#       type: i32
# - name: x64_const
#   code: 0x42
#   doc: A constant i64
#   immediates:
#     - name: value
#       type: int64

# ## Comparison Operators

# - name: i32_eqz
#   code: 0x45
# - name: i32_eq
#   code: 0x46
# - name: i32_ne
#   code: 0x47
# - name: i32_lt_s
#   code: 0x48
# - name: i32_lt_u
#   code: 0x49
# - name: i32_gt_s
#   code: 0x4a
# - name: i32_gt_u
#   code: 0x4b
# - name: i32_le_s
#   code: 0x4c
# - name: i32_le_u
#   code: 0x4d
# - name: i32_ge_s
#   code: 0x4e
# - name: i32_ge_u
#   code: 0x4f

# - name: i64_eqz
#   code: 0x50
# - name: i64_eq
#   code: 0x51
# - name: i64_ne
#   code: 0x52
# - name: i64_lt_s
#   code: 0x53
# - name: i64_lt_u
#   code: 0x54
# - name: i64_gt_s
#   code: 0x55
# - name: i64_gt_u
#   code: 0x56
# - name: i64_le_s
#   code: 0x57
# - name: i64_le_u
#   code: 0x58
# - name: i64_ge_s
#   code: 0x59
# - name: i64_ge_u
#   code: 0x5a

# - name: f32_eq
#   code: 0x5b
# - name: f32_ne
#   code: 0x5c
# - name: f32_lt
#   code: 0x5d
# - name: f32_gt
#   code: 0x5e
# - name: f32_le
#   code: 0x5f
# - name: f32_ge
#   code: 0x60

# - name: f64_eq
#   code: 0x61
# - name: f64_ne
#   code: 0x62
# - name: f64_lt
#   code: 0x63
# - name: f64_gt
#   code: 0x64
# - name: f64_le
#   code: 0x65
# - name: f64_ge
#   code: 0x66

# ## Numeric Operators

# - name: i32_clz
#   code: 0x67
# - name: i32_ctz
#   code: 0x68
# - name: i32_popcnt
#   code: 0x69
- name: i32.add
  code: 0x6a
  doc: Add two I32 values.
  immediates:
    - name: dst
      type: reg_x32
    - name: lhs
      type: reg_x32
    - name: rhs
      type: reg_x32
#   signature: "(i32 i32) : (i32)"
# - name: i32_sub
#   code: 0x6b
# - name: i32_mul
#   code: 0x6c
# - name: i32_div_s
#   code: 0x6d
# - name: i32_div_u
#   code: 0x6e
# - name: i32_rem_s
#   code: 0x6f
# - name: i32_rem_u
#   code: 0x70
# - name: i32_and
#   code: 0x71
# - name: i32_or
#   code: 0x72
# - name: i32_xor
#   code: 0x73
# - name: i32_shl
#   code: 0x74
# - name: i32_shr_s
#   code: 0x75
# - name: i32_shr_u
#   code: 0x76
# - name: i32_rotl
#   code: 0x77
# - name: i32_rotr
#   code: 0x78

# - name: i64_clz
#   code: 0x79
# - name: i64_ctz
#   code: 0x7a
# - name: i64_popcnt
#   code: 0x7b
# - name: i64_add
#   code: 0x7c
# - name: i64_sub
#   code: 0x7d
# - name: i64_mul
#   code: 0x7e
# - name: i64_div_s
#   code: 0x7f
# - name: i64_div_u
#   code: 0x80
# - name: i64_rem_s
#   code: 0x81
# - name: i64_rem_u
#   code: 0x82
# - name: i64_and
#   code: 0x83
# - name: i64_or
#   code: 0x84
# - name: i64_xor
#   code: 0x85
# - name: i64_shl
#   code: 0x86
# - name: i64_shr_s
#   code: 0x87
# - name: i64_shr_u
#   code: 0x88
# - name: i64_rotl
#   code: 0x89
# - name: i64_rotr
#   code: 0x8a

# - name: f32_abs
#   code: 0x8b
# - name: f32_neg
#   code: 0x8c
# - name: f32_ceil
#   code: 0x8d
# - name: f32_floor
#   code: 0x8e
# - name: f32_trunc
#   code: 0x8f
# - name: f32_nearest
#   code: 0x90
# - name: f32_sqrt
#   code: 0x91
# - name: f32_add
#   code: 0x92
# - name: f32_sub
#   code: 0x93
# - name: f32_mul
#   code: 0x94
# - name: f32_div
#   code: 0x95
# - name: f32_min
#   code: 0x96
# - name: f32_max
#   code: 0x97
# - name: f32_copysign
#   code: 0x98

# - name: f64_abs
#   code: 0x99
# - name: f64_neg
#   code: 0x9a
# - name: f64_ceil
#   code: 0x9b
# - name: f64_floor
#   code: 0x9c
# - name: f64_trunc
#   code: 0x9d
# - name: f64_nearest
#   code: 0x9e
# - name: f64_sqrt
#   code: 0x9f
# - name: f64_add
#   code: 0xa0
# - name: f64_sub
#   code: 0xa1
# - name: f64_mul
#   code: 0xa2
# - name: f64_div
#   code: 0xa3
# - name: f64_min
#   code: 0xa4
# - name: f64_max
#   code: 0xa5
# - name: f64_copysign
#   code: 0xa6

# ## conversions

# - name: i32_wrap_i64
#   code: 0xa7
# - name: i32_trunc_s_f32
#   code: 0xa8
# - name: i32_trunc_u_f32
#   code: 0xa9
# - name: i32_trunc_s_f64
#   code: 0xaa
# - name: i32_trunc_u_f64
#   code: 0xab
# - name: i64_extend_s_i32
#   code: 0xac
# - name: i64_extend_u_i32
#   code: 0xad
# - name: i64_trunc_s_f32
#   code: 0xae
# - name: i64_trunc_u_f32
#   code: 0xaf
# - name: i64_trunc_s_f64
#   code: 0xb0
# - name: i64_trunc_u_f64
#   code: 0xb1
# - name: f32_convert_s_i32
#   code: 0xb2
# - name: f32_convert_u_i32
#   code: 0xb3
# - name: f32_convert_s_i64
#   code: 0xb4
# - name: f32_convert_u_i64
#   code: 0xb5
# - name: f32_demote_f64
#   code: 0xb6
# - name: f64_convert_s_i32
#   code: 0xb7
# - name: f64_convert_u_i32
#   code: 0xb8
# - name: f64_convert_s_i64
#   code: 0xb9
# - name: f64_convert_u_i64
#   code: 0xba
# - name: f64_promote_f32
#   code: 0xbb


# - name: dbg_break
#   code: 0xFF
#   doc:  abort into the debugger

